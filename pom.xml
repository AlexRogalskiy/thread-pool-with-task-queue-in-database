<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.canchitodev.example</groupId>
	<artifactId>thread-pool-with-task-queue-in-database</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<parent><!-- Core starter, including auto-configuration support, logging and YAML -->
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.9.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent><!-- Core starter, including auto-configuration support, logging and YAML -->

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<java.uuid.generator>3.1.3</java.uuid.generator>
	</properties>

	<dependencies>
		<!-- Java Persistence API including spring-data-jpa, spring-orm and Hibernate -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- Java Persistence API including spring-data-jpa, spring-orm and Hibernate -->
		
		<!-- Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container -->

		<!-- Spring Boot Developer Tools -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- Spring Boot Developer Tools -->
		
		<!-- UUID id generator for high concurrency -->
	    <dependency>
	      <groupId>com.fasterxml.uuid</groupId>
	      <artifactId>java-uuid-generator</artifactId>
	      <version>${java.uuid.generator}</version>
	    </dependency>
		<!-- UUID id generator for high concurrency -->
		
		<!-- Core starter, including auto-configuration support, logging and YAML -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter</artifactId>
		    <exclusions>
		        <exclusion>
		            <groupId>org.springframework.boot</groupId>
		            <artifactId>spring-boot-starter-logging</artifactId>
		        </exclusion>
		    </exclusions>
		</dependency>
		<!-- Core starter, including auto-configuration support, logging and YAML -->
		
		<!-- Starter for using Log4j2 for logging. An alternative to spring-boot-starter-logging -->
		<dependency>
		  <groupId>org.slf4j</groupId>
		  <artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
		  <groupId>org.slf4j</groupId>
		  <artifactId>slf4j-log4j12</artifactId>
		</dependency>
		<!-- Starter for using Log4j2 for logging. An alternative to spring-boot-starter-logging -->
		
		<!-- A simple Java toolkit for JSON
			 https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
		<dependency>
		    <groupId>com.googlecode.json-simple</groupId>
		    <artifactId>json-simple</artifactId>
		</dependency>
		<!-- A simple Java toolkit for JSON
			 https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
		
		<!-- Databases  MySQL JDBC Type 4 drive -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- Databases  MySQL JDBC Type 4 drive -->
		
		<!-- Starter for using Tomcat as the embedded servlet container. Default servlet container starter used by spring-boot-starter-web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Starter for using Tomcat as the embedded servlet container. Default servlet container starter used by spring-boot-starter-web -->
		
		<!-- Starter for testing Spring Boot applications with libraries including JUnit, Hamcrest and Mockito -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Starter for testing Spring Boot applications with libraries including JUnit, Hamcrest and Mockito -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				
				<!-- make the app executable -->
 				<configuration>
					<executable>false</executable>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
	<repositories>
        <repository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </repository>
    </repositories>
    
    <pluginRepositories>
        <pluginRepository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </pluginRepository>
    </pluginRepositories>

	<name>thread-pool-with-task-queue-in-database</name>
	<description>Demo project for showing how to implement thread pools which task queue is a database table</description>
	
	<organization>
		<name>Canchito Development</name>
		<url>http://www.canchito-dev.com</url>
	</organization>
	
	<issueManagement>
		<system>Canchito Development</system>
		<url>https://github.com/canchito-dev/thread-pool-with-task-queue-in-database/issues</url>
	</issueManagement>
	
	<url>https://github.com/canchito-dev/thread-pool-with-task-queue-in-database</url>
</project>